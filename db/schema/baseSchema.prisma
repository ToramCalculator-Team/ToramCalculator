/**
 * @file baseSchema.prisma
 * @description 基础数据库结构
 * @version 1.0.0
 */

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins", "fullTextSearchPostgres"]
}

// generator zod {
//     provider                 = "zod-prisma-types"
//     output                   = "./zod"
//     fileName                 = "zod.ts"
//     writeNullishInModelTypes = false // 是否将可选字段类型转换为 null | undefined
//     useMultipleFiles         = false // 是否生成拆分的ts
//     createInputTypes         = false // 是否生成input类型
// }

generator kysely {
    provider     = "prisma-kysely"
    output       = "./generated/kysely"
    fileName     = "kyesely.ts"
    enumFileName = "enums.ts"
}

datasource db {
    provider = "postgresql"
    url      = env("PG_URL")
}

model user {
    id            String    @id
    name          String? ///  @zod.string.min(2, { message: "最少2个字符" })
    email         String?   @unique
    emailVerified DateTime?
    password      String? ///  @zod.string.min(8, { message: "最少8个字符" })
    image         String?
    accounts      account[]
    sessions      session[]
    posts         post[]
}

model account {
    id                String   @id
    type              String // Enum ACCOUNT_TYPE
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String?
    players           player[]

    create account_create_data?
    update account_update_data?

    @@unique([provider, providerAccountId])
}

model session {
    id           String   @id
    sessionToken String   @unique
    expires      DateTime
    user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model verification_token {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model post {
    id          String   @id
    name        String
    createdAt   DateTime
    updatedAt   DateTime @updatedAt
    createdBy   user     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@index([name])
}

// 账户创建内容
model account_create_data {
    mobs            mob[]
    items           item[]
    skills          skill[]
    simulators      simulator[]
    world           world[]
    address         address[]
    activity        activity[]
    zone            zone[]
    recipe          recipe[]
    npc             npc[]
    task            task[]
    belongToAccount account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId       String      @id
}

// 账户更新内容
model account_update_data {
    mobs            mob[]
    items           item[]
    skills          skill[]
    simulator       simulator[]
    world           world[]
    address         address[]
    activity        activity[]
    zone            zone[]
    recipe          recipe[]
    npc             npc[]
    task            task[]
    belongToAccount account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId       String      @id
}

// wiki内容 ----------------------------------------------------------------------------------------------

// 世界
model world {
    id String @id

    name      String
    addresses address[]

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

// 地点
model address {
    id String @id

    name String
    type String // Enum ADDRESS_TYPE
    posX Int
    posY Int

    zones zone[]

    belongToWorld world  @relation(fields: [worldId], references: [id])
    worldId       String

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

// 活动
model activity {
    id   String @id
    name String

    zones   zone[]
    recipes recipe[]

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

// 地点区域
model zone {
    id String @id

    name        String
    rewardNodes Int?
    mobs        mob[]
    npcs        npc[]

    belongToActivity activity? @relation(fields: [activityId], references: [id])
    activityId       String?
    belongToAddress  address   @relation(fields: [addressId], references: [id])
    addressId        String

    link   zone[] @relation("linkZones")
    linked zone[] @relation("linkZones")

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

model image {
    id String @id

    dataUrl String

    belongToNpc    npc?    @relation(fields: [npcId], references: [id], onDelete: Cascade)
    npcId          String?
    belongToWeapon weapon? @relation(fields: [weaponId], references: [itemId], onDelete: Cascade)
    weaponId       String?
    belongToArmor  armor?  @relation(fields: [armorId], references: [itemId], onDelete: Cascade)
    armorId        String?
    belongToOption option? @relation(fields: [optEquipId], references: [itemId], onDelete: Cascade)
    optEquipId     String?
    usedByMob      mob?    @relation(fields: [mobId], references: [id], onDelete: Cascade)
    mobId          String?
}

// 统计字段
model statistic {
    id String @id

    updatedAt       DateTime   @updatedAt
    createdAt       DateTime
    usageTimestamps DateTime[]
    viewTimestamps  DateTime[]

    belongToMob       mob?
    belongToItem      item?
    belongToSkill     skill?
    belongToCharacter character?
    belongToSimulator simulator?
    world             world?
    address           address?
    activity          activity?
    zone              zone?
    recipe            recipe?
    npc               npc?
    task              task?
}

// 怪物
model mob {
    id String @id

    name               String
    type               String // Enum MOB_TYPE
    captureable        Boolean
    baseLv             Int
    experience         Int
    partsExperience    Int
    initialElement     String // Enum ELEMENT_TYPE
    radius             Int
    maxhp              Int
    physicalDefense    Int
    physicalResistance Int
    magicalDefense     Int
    magicalResistance  Int
    criticalResistance Int
    avoidance          Int
    dodge              Int
    block              Int
    normalDefExp       Int
    physicDefExp       Int
    magicDefExp        Int
    actions            Json

    drops drop_item[]

    details     String?
    dataSources String

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique
    image       image[]

    belongToZones              zone[]
    usedByTaskKillRequirements task_kill_requirement[]
    usedByMembers              member[]
    usedByPlayerPets           player_pet[]

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId])
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId])
    createdByAccountId String?
    // FTS
}

// 道具
model item {
    id             String @id
    itemType       String // Enum ITEM_TYPE
    itemSourceType String // Enum ITEM_SOURCE_TYPE
    name           String

    dataSources String
    details     String?

    weapon     weapon?
    armor      armor?
    option     option?
    special    special?
    crystal    crystal?
    consumable consumable?
    material   material?

    recipe recipe?

    usedByDropItem    drop_item[]
    usedByRewardItem  task_reward[]
    usedByTaskRequire task_collect_require[]

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?

    // 道具可以作为其他道具的配方原料
    usedInIngredient recipe_ingredient[]
}

// 素材物品
model material {
    type    String // Enum MATERIAL_TYPE
    ptValue Int
    price   Int

    belongToItem item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String @id
}

// 消耗品
model consumable {
    type           String // Enum CONSUMABLE_TYPE
    effectDuration Int
    effects        String[]

    belongToItem item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String @id
    // recipe       recipe?

    usedBy character[]
}

// 锻晶
model crystal {
    type      String // Enum CRYSTAL_TYPE
    modifiers String[]

    front crystal[] @relation("frontRelation")
    back  crystal[] @relation("backRelation")

    belongToItem item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String @id

    usedByWeapon        weapon[]
    usedByPlayerWeapon  player_weapon[]
    usedByArmor         armor[]
    usedByPlayerArmor   player_armor[]
    usedByOption        option[]
    usedByPlayerOption  player_option[]
    usedBySpecial       special[]
    usedByPlayerSpecial player_special[]

    frontRelated crystal[] @relation("frontRelation")
    backRelated  crystal[] @relation("backRelation")
}

// 武器
model weapon {
    type            String // Enum WEAPON_TYPE
    baseAbi         Int
    stability       Int
    defaultCrystals crystal[]
    modifiers       String[]
    colorA          Int
    colorB          Int
    colorC          Int
    image           image[]
    elementType     String // Enum ELEMENT_TYPE

    usedBy player_weapon[]

    belongToItem item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String @id
}

// 防具
model armor {
    baseAbi         Int
    defaultCrystals crystal[]
    modifiers       String[]
    colorA          Int
    colorB          Int
    colorC          Int
    image           image[]

    usedBy player_armor[]

    belongToItem item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String @id
}

// 追加装备
model option {
    baseAbi         Int
    defaultCrystals crystal[]
    modifiers       String[]
    colorA          Int
    colorB          Int
    colorC          Int
    image           image[]

    usedBy player_option[]

    belongToItem item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String @id
}

// 特殊装备
model special {
    baseAbi         Int
    defaultCrystals crystal[]
    modifiers       String[]

    usedBy player_special[]

    belongToItem item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String @id
}

// 配方
model recipe {
    id String @id

    recipeEntries recipe_ingredient[]

    belongToItem item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String @unique

    inActivity activity? @relation(fields: [activityId], references: [id])
    activityId String?

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

// 配方项
model recipe_ingredient {
    id String @id

    count  Int
    type   String // Enum RECIPE_INGREDIENT_TYPE
    item   item?   @relation(fields: [itemId], references: [id])
    itemId String?

    // 从属于配方
    belongTorecipe recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId       String
}

// 掉落物
model drop_item {
    id String @id

    item            item   @relation(fields: [itemId], references: [id])
    itemId          String
    probability     Int
    relatedPartType String // Enum BOSS_PART_TYPE
    relatedPartInfo String
    breakRewardType String // Enum BOSS_PART_BREAK_REWARD_TYPE

    dropBy   mob    @relation(fields: [dropById], references: [id], onDelete: Cascade)
    dropById String
}

// NPC
model npc {
    id String @id

    name String

    tasks task[]
    image image[]

    belongToZone zone   @relation(fields: [zoneId], references: [id])
    zoneId       String

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

// 任务
model task {
    id String @id

    lv          Int
    name        String
    type        String // Enum TASK_TYPE
    description String
    kills       task_kill_requirement[]
    requires    task_collect_require[]
    rewards     task_reward[]

    belongToNpc npc    @relation(fields: [npcId], references: [id])
    npcId       String

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

// 任务击杀要求
model task_kill_requirement {
    id String @id

    mob   mob    @relation(fields: [mobId], references: [id])
    mobId String
    count Int

    belongToTask task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId       String
}

// 任务收集需求项
model task_collect_require {
    id String @id

    count  Int
    item   item   @relation(fields: [itemId], references: [id])
    itemId String

    // 从属于任务
    belongTorecipe task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId         String
}

// 任务奖励
model task_reward {
    id String @id

    type        String // Enum TASK_REWARD_TYPE
    value       Int
    probability Int
    item        item?   @relation(fields: [itemId], references: [id]) // 仅当type为item时生效
    itemId      String?

    belongToTask task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId       String
}

// 技能
model skill {
    id String @id

    treeType     String // Enum SKILL_TREE_TYPE
    posX         Int
    posY         Int
    tier         Int
    name         String
    isPassive    Boolean
    chargingType String // Enum SKILL_CHARGING_TYPE
    distanceType String // Enum SKILL_DISTANCE_TYPE
    targetType   String // Enum SKILL_TARGET_TYPE
    effect       skill_effect[]

    details     String
    dataSources String

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    usedByCharacterSkill character_skill[]

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

// 技能效果
model skill_effect {
    id String @id

    condition         String
    elementLogic      String
    castingRange      String
    effectiveRange    Int
    motionFixed       String
    motionModified    String
    chantingFixed     String
    chantingModified  String
    reservoirFixed    String
    reservoirModified String
    startupFrames     String
    hpCost            String?
    mpCost            String?
    description       String
    logic             Json
    details           String?

    belongToSkill   skill  @relation(fields: [belongToskillId], references: [id], onDelete: Cascade)
    belongToskillId String
}

// 模拟器内容 ----------------------------------------------------------------------------------------------

// 资产归属和操作实体
model player {
    id String @id

    name  String
    useIn String

    pets       player_pet[]
    weapons    player_weapon[]
    armors     player_armor[]
    optEquips  player_option[]
    speEquips  player_special[]
    avatars    avatar[]
    characters character[]

    belongToAccount account @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId       String

    usedByMember member[]
}

// 玩家自定义武器
model player_weapon {
    id String @id

    name        String
    type        String // Enum WEAPON_TYPE
    elementType String // Enum ELEMENT_TYPE
    baseAbi     Int
    stability   Int
    extraAbi    Int
    template    weapon?   @relation(fields: [templateId], references: [itemId])
    templateId  String?
    refinement  Int
    modifiers   String[]
    crystals    crystal[]

    master   player @relation(fields: [masterId], references: [id], onDelete: Cascade)
    masterId String

    usedByMainHand character[] @relation("weapon")
    usedBySubHand  character[] @relation("subWeapon")
}

// 玩家自定义身体装备
model player_armor {
    id String @id

    name       String
    baseAbi    Int
    extraAbi   Int
    ability    String // Enum PLAYER_ARMOR_ABILITY_TYPE
    template   armor?    @relation(fields: [templateId], references: [itemId])
    templateId String?
    refinement Int
    modifiers  String[]
    crystals   crystal[]

    master   player @relation(fields: [masterId], references: [id], onDelete: Cascade)
    masterId String

    usedBy character[]
}

// 玩家自定义追加装备
model player_option {
    id String @id

    name       String
    baseAbi    Int
    extraAbi   Int
    template   option?   @relation(fields: [templateId], references: [itemId])
    templateId String
    refinement Int
    modifiers  String[]
    crystals   crystal[]

    master   player @relation(fields: [masterId], references: [id], onDelete: Cascade)
    masterId String

    usedBy character[]
}

// 玩家自定义特殊装备
model player_special {
    id String @id

    name       String
    baseAbi    Int
    extraAbi   Int
    template   special?  @relation(fields: [templateId], references: [itemId])
    templateId String
    modifiers  String[]
    crystals   crystal[]

    master   player @relation(fields: [masterId], references: [id], onDelete: Cascade)
    masterId String

    usedBy character[]
}

// 自定义宠物
model player_pet {
    id String @id

    template    mob    @relation(fields: [templateId], references: [id])
    templateId  String
    name        String
    pStr        Int
    pInt        Int
    pVit        Int
    pAgi        Int
    pDex        Int
    str         Int
    int         Int
    vit         Int
    agi         Int
    dex         Int
    weaponType  String // Enum MAIN_WEAPON_TYPE
    personaType String // Enum PET_PERSONA_TYPE
    type        String // Enum PET_TYPE
    weaponAtk   Int
    generation  Int
    maxLv       Int

    master   player @relation(fields: [masterId], references: [id], onDelete: Cascade)
    masterId String
}

// 时装
model avatar {
    id String @id

    name           String
    type           String // Enum AVATAR_TYPE
    modifiers      String[]
    belongToPlayer player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
    playerId       String

    usedBy character[]
}

// 机体
model character {
    id   String @id
    name String

    lv                Int
    str               Int
    int               Int
    vit               Int
    agi               Int
    dex               Int
    personalityType   String // Enum CHARACTER_PERSONALITY_TYPE
    personalityValue  Int
    weapon            player_weapon     @relation("weapon", fields: [weaponId], references: [id])
    weaponId          String
    subWeapon         player_weapon     @relation("subWeapon", fields: [subWeaponId], references: [id])
    subWeaponId       String
    armor             player_armor      @relation(fields: [armorId], references: [id])
    armorId           String
    optEquip          player_option     @relation(fields: [optEquipId], references: [id])
    optEquipId        String
    speEquip          player_special    @relation(fields: [speEquipId], references: [id])
    speEquipId        String
    avatars           avatar[]
    cooking           String[]
    modifiers         String[]
    skills            character_skill[]
    partnerSkillAId   String?
    partnerSkillAType String // Enum PARTNER_SKILL_TYPE
    partnerSkillBId   String?
    partnerSkillBType String // Enum PARTNER_SKILL_TYPE
    consumables       consumable[]
    combos            combo[]
    master            player            @relation(fields: [masterId], references: [id], onDelete: Cascade)
    masterId          String

    details String?

    usedInMercenary mercenary?

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique
}

// 角色习得技能
model character_skill {
    id String @id

    lv         Int
    isStarGem  Boolean
    template   skill   @relation(fields: [templateId], references: [id])
    templateId String

    usedBy combo_step[]

    belongToCharacter character @relation(fields: [characterId], references: [id], onDelete: Cascade)
    characterId       String
}

// 连击
model combo {
    id String @id

    disable Boolean
    name    String
    content combo_step[]

    belongToCharacter character @relation(fields: [characterId], references: [id], onDelete: Cascade)
    characterId       String
}

// 连击步骤
model combo_step {
    id String @id

    type             String // Enum COMBO_STEP_TYPE
    characterSkill   character_skill @relation(fields: [characterSkillId], references: [id])
    characterSkillId String

    belongToCombo combo  @relation(fields: [comboId], references: [id], onDelete: Cascade)
    comboId       String
}

// 佣兵
model mercenary {
    type       String // Enum MERCENARY_TYPE
    template   character @relation(fields: [templateId], references: [id], onDelete: Cascade)
    templateId String    @id

    skillAId   String
    skillAType String // Enum PARTNER_SKILL_TYPE
    skillBId   String
    skillBType String // Enum PARTNER_SKILL_TYPE

    usedByMemberPartner   member[] @relation("partner")
    usedByMemberMercenary member[] @relation("mercenary")
}

// 模拟器
model simulator {
    id String @id

    name  String
    campA team[] @relation("campA")
    campB team[] @relation("campB")

    details String?

    statistic   statistic @relation(fields: [statisticId], references: [id])
    statisticId String    @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId], onDelete: Cascade)
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId], onDelete: Cascade)
    createdByAccountId String?
}

// 队伍
model team {
    id String @id

    name    String?
    members member[]
    gems    String[]

    usedByCampA simulator[] @relation("campA")
    usedByCampB simulator[] @relation("campB")
}

// 队伍成员
model member {
    id String @id

    name              String
    sequence          Int
    type              String // Enum MEMBER_TYPE
    player            player?    @relation(fields: [playerId], references: [id])
    playerId          String?
    partner           mercenary? @relation("partner", fields: [partnerId], references: [templateId])
    partnerId         String?
    mercenary         mercenary? @relation("mercenary", fields: [mercenaryId], references: [templateId])
    mercenaryId       String?
    mob               mob?       @relation(fields: [mobId], references: [id])
    mobId             String?
    mobDifficultyFlag String // Enum MOB_DIFFICULTY_FLAG
    actions           Json

    belongToTeam team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId       String
}
